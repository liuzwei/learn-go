## 数学

假设 $n$ 个硬币最多凑出 $x$ 行，根据等差数列求和公式 $S_n = n * a_1 + \frac{n * (n - 1)}{2} * d$（首项和公差均为 $1$），可得 $n$ 和 $x$ 的关系：

$$
\frac{x * (x + 1)}{2} <= n
$$

问题为求满足上式前提下，$x$ 的最大值为多少。

根据 [求解一元二次方程](https://baike.baidu.com/item/%E4%B8%80%E5%85%83%E4%BA%8C%E6%AC%A1%E6%96%B9%E7%A8%8B) 求根公式，可得：

$$
x <= \left \lfloor \frac{- 1 + \sqrt{1 + 8 * n}}{2} \right \rfloor
$$

代码：

* []

```Java
class Solution {
    public int arrangeCoins(int n) {
        return (int)((Math.sqrt(1 + 8.0 * n) - 1) / 2);
    }
}
```

* 时间复杂度：$O(1)$
* 空间复杂度：$O(1)$

---

## 二分

对于解方程不熟悉的同学，也可以使用「二分」来做。

对于 $n$ 个硬币而言，最多凑成的行数不会超过 $n$ 行，当且仅当 $n = 1$ 的时候可以取到。

假设最大能够凑成的行数为 $x$，那么以 $x$ 为分割点的数轴上具有二段性，使用 $n$ 个硬币如果能够凑成 $x$ 行，那么必然也能够凑成少于等于 $x$ 行的阶梯硬币，必然不能凑成大于 $x$ 行的阶梯硬币。

对于 $x$ 行阶梯硬币所需要的硬币数量，还是可以利用等差数列求和公式直接算出。

代码：

* []

```Java
class Solution {
    public int arrangeCoins(int n) {
        long l = 1, r = n;
        while (l < r) {
            long mid = l + r + 1 >> 1;
            if (mid * (mid + 1) / 2 <= n) l = mid;
            else r = mid - 1;
        }
        return (int)r;
    }
}
```

* 时间复杂度：$O(\log{n})$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png)（公主号后台回复「送书」即可参与长期看题解学算法送实体书活动）或 加入[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
